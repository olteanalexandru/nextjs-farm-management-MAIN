generator client {
  provider = "prisma-client-js"
  previewFeatures = ["microsoftSqlServer"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(uuid())
  name           String
  email          String            @unique
  roleType       String            @default("FARMER")
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  crops          Crop[]            @relation("UserCrops")
  posts          Post[]            @relation("UserPosts")
  rotations      Rotation[]        @relation("UserRotations")
  cropSelections UserCropSelection[] @relation("UserSelections")

  @@map("users")
}

model Crop {
  id                             Int                @id @default(autoincrement())
  userId                         String
  user                          User               @relation("UserCrops", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cropName                       String
  cropType                       String?
  cropVariety                    String?
  plantingDate                   DateTime?
  harvestingDate                DateTime?
  description                    String?           @db.Text
  imageUrl                       String?           @db.Text
  soilType                       String?
  climate                        String?
  ItShouldNotBeRepeatedForXYears Int?
  nitrogenSupply                 Decimal          @db.Decimal(10,2)
  nitrogenDemand                 Decimal          @db.Decimal(10,2)
  soilResidualNitrogen          Decimal?         @db.Decimal(10,2)
  createdAt                     DateTime          @default(now())
  updatedAt                     DateTime          @updatedAt
  deleted                       DateTime?
  
  details                      CropDetail[]        @relation("CropDetails")
  rotationPlans               RotationPlan[]      @relation("CropRotationPlans")
  userSelections              UserCropSelection[] @relation("CropSelections")

  @@index([userId])
  @@index([cropName])
  @@map("crops")
}

model CropDetail {
  id        Int       @id @default(autoincrement())
  value     String
  detailType String   
  cropId    Int
  crop      Crop      @relation("CropDetails", fields: [cropId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([cropId, detailType])
  @@map("crop_details")
}

model Rotation {
  id                Int            @id @default(autoincrement())
  userId           String
  user             User           @relation("UserRotations", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rotationName     String
  fieldSize        Decimal        @db.Decimal(10,2)
  numberOfDivisions Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  rotationPlans    RotationPlan[] @relation("RotationPlans")

  @@map("rotations")
}

model RotationPlan {
  id              Int       @id @default(autoincrement())
  rotationId      Int
  rotation        Rotation  @relation("RotationPlans", fields: [rotationId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  year            Int
  division        Int
  cropId          Int
  crop            Crop      @relation("CropRotationPlans", fields: [cropId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  plantingDate    DateTime?
  harvestingDate  DateTime?
  divisionSize    Decimal?  @db.Decimal(10,2)
  nitrogenBalance Decimal?  @db.Decimal(10,2)
  directlyUpdated Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("rotation_plans")
}

model Post {
  id          Int      @id @default(autoincrement())
  userId      String
  user        User     @relation("UserPosts", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  title       String
  brief       String?  @db.Text
  description String?  @db.Text
  image       String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("posts")
}

model UserCropSelection {
  id            Int      @id @default(autoincrement())
  userId        String
  user          User     @relation("UserSelections", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cropId        Int
  crop          Crop     @relation("CropSelections", fields: [cropId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  selectionCount Int     @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([userId, cropId])
  @@map("user_crop_selections")
}
